// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require('Verifier');
const proof = require('../../zokrates/code/square/proof.json');

contract('TestVerifier', accounts => {
    const account1 = accounts[0];

    const a = proof["proof"]["a"];
    const b = proof["proof"]["b"];
    const c = proof["proof"]["c"];
    const correctProofInput = proof["inputs"];
    const incorrectProofInput = [4, 2];

    describe('Test verifier', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account1});
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Test verification with correct proof', async function () {
            let isVerified = await this.contract.verifyTx.call(a, b, c, correctProofInput);
            assert.equal(isVerified, true, "Incorrect proof");
        });
    
        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let isVerified = await this.contract.verifyTx.call(a, b, c, incorrectProofInput);
            assert.equal(isVerified, false, "Correct proof");
        });
    });
});